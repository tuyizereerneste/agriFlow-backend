// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String   @unique
  password String
  role     Role?
  type     UserType
  company  Company?
  location Location[]
  projects Project[]
}

enum Role {
  Admin
  Volunteer
}

enum UserType {
  user
  company
}

model Company {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  logo     String?
  tin      String
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id])
  location Location[]
}

model Farmer {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  farmerNumber String     @unique
  names        String
  phones       String[]
  dob          DateTime
  gender       Gender
  qrCode       String     @unique @default(uuid())
  location     Location[]
  partner      Partner?   @relation("FarmerPartner")
  children     Child[]
  lands        Land[]
  enrollments  ProjectEnrollment[]
  attendances  Attendance[]
  createdAt    DateTime   @default(now())
}


model Location {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  province   String
  district   String
  sector     String
  cell       String
  village    String
  latitude   Float?
  longitude  Float?
  farmer     Farmer?  @relation(fields: [farmerId], references: [id])
  farmerId   String?
  lands      LandLocation[]
  company    Company? @relation(fields: [companyId], references: [id])
  companyId  String?
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Partner {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  phones   String[]
  dob      DateTime
  gender   Gender
  farmerId String   @unique
  farmer   Farmer   @relation("FarmerPartner", fields: [farmerId], references: [id])
}

model Child {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  dob       DateTime
  gender    Gender
  farmerId  String
  farmer    Farmer   @relation(fields: [farmerId], references: [id])
}

model LandLocation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  landId     String
  locationId String
  land       Land     @relation(fields: [landId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])
}

model Land {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  size       Float
  ownership  Ownership
  crops      String[]
  farmerId   String
  farmer     Farmer   @relation(fields: [farmerId], references: [id])
  locations  LandLocation[] // Define the relation to LandLocation
  nearby     NearbyType[]
  targetLinks  TargetPracticeLand[]
}

enum Gender {
  Male
  Female
}

enum Ownership {
  Owned
  Rented
  Borrowed
  Other
}

enum NearbyType {
  River
  Road
  Lake
  Other
}


model Project {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  ownerId         String             @db.ObjectId
  owner           User              @relation(fields: [ownerId], references: [id])
  startDate       DateTime
  endDate         DateTime
  objectives      String
  targetPractices TargetPractice[]
  farmers         ProjectEnrollment[]
  createdAt       DateTime           @default(now())
}



model ProjectEnrollment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId  String
  farmerId   String
  createdAt  DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id])
  farmer     Farmer   @relation(fields: [farmerId], references: [id])
}


model TargetPractice {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  title            String               // e.g., Agroforestry
  initialSituation String               // Context before intervention
  projectId        String
  project          Project              @relation(fields: [projectId], references: [id])
  activities       Activity[]
  lands            TargetPracticeLand[] // Lands used in this practice
}

model Activity {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  targetPracticeId String
  title            String
  description      String
  startDate        DateTime
  endDate          DateTime
  targetPractice   TargetPractice @relation(fields: [targetPracticeId], references: [id])
  attendances      Attendance[]
}


model TargetPracticeLand {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  targetPracticeId String
  landId           String
  targetPractice   TargetPractice @relation(fields: [targetPracticeId], references: [id])
  land             Land           @relation(fields: [landId], references: [id])
}

model Attendance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  activityId String
  farmerId   String
  photos     String[]
  notes      String?
  createdAt  DateTime @default(now())

  activity   Activity @relation(fields: [activityId], references: [id])
  farmer     Farmer   @relation(fields: [farmerId], references: [id])
}






